{
    // Info displayed in the Extension Store
    "id": "postgres-vs",
    "name": "PostgreSQL Virtual Schema",
    "description": "...",
    "version": "2.0.1",
    // Dependencies
    "bucketFsUpload": {
        "jdbcDriver": {
            // Download URL for the JDBC driver, e.g. Maven Central URL
            "downloadUrl": "https://jdbc.postgresql.org/download/postgresql-42.3.3.jar",
            // License URL
            "licenseUrl": "https://github.com/pgjdbc/pgjdbc/blob/master/LICENSE",
            // True if the user must agree to the license before installation, e.g. for Oracle JDBC driver
            "licenseAgreementRequired": false,
            // Filename when uploading files to BucketFS. Path is specific for the concrete extension version, e.g. `/bucketfs/<service>/<bucket>/extensions/<extension-id>/<extension-version>/`
            "bucketFsFilename": "postgresql-jdbc-driver.jar"
        },
        "virtualSchemaAdapter": {
            "downloadUrl": "https://github.com/exasol/postgresql-virtual-schema/releases/download/2.0.1/virtual-schema-dist-9.0.4-postgresql-2.0.1.jar",
            "licenseUrl": "https://github.com/exasol/postgresql-virtual-schema/blob/main/LICENSE",
            "bucketFsFilename": "postgresql-adapter.jar"
        }
    },
    "parameters": {
        "adapterSchema": {
            "type": "string", // normal text field
            "description": "Schema in which to install the virtual schema adapter",
            "default": "POSTGRES_ADAPTER_SCHEMA",
            "scope": "configuration",
            "readOnlyAfterInstallation": true // only editable during installation
        },
        "adapterScriptName": {
            "type": "string",
            "description": "Name of the adapter script",
            "default": "POSTGRES_ADAPTER",
            "scope": "configuration",
            "readOnlyAfterInstallation": true
        },
        "connectionName": {
            "type": "string",
            "description": "Name of the PostgreSQL connection containing the PostgreSQL credentials",
            "default": "POSTGRESQL_CONNECTION",
            "scope": "connection",
            "readOnlyAfterInstallation": true
        },
        // We could think about specifying host, port and database separately
        "jdbcUrl": {
            // Option 1 (dedicated type):
            // "type": "jdbcUrl",
            // Option 2 (Regexp):
            "type": "regex",
            "regex": "jdbc:\\w+://...",
            "description": "JDBC URL of the PostgreSQL database",
            "scope": "connection",
            "default": "jdbc:postgresql://<host>:<port>/<database name>?ssl=true&sslfactory=org.postgresql.ssl.DefaultJavaSSLFactory"
        },
        "user": {
            "type": "string",
            "description": "Name of the PostgreSQL user",
            "scope": "connection"
        },
        "password": {
            "type": "password", // Password input field
            "description": "Password of the PostgreSQL user",
            "scope": "connection"
        },
        "virtualSchemaName": {
            "type": "string",
            "description": "Name of the virtual schema",
            "default": "VIRTUAL_POSTGRES_SCHEMA",
            "readOnlyAfterInstallation": true,
            "scope": "connection"
        },
        "postgresCatalogName": {
            "type": "string",
            "description": "Name of the PostgreSQL catalog / database",
            "scope": "connection",
            "default": ""
        },
        "postgresSchemaName": {
            "type": "string",
            "description": "Name of the PostgreSQL schema",
            "scope": "connection",
            "default": ""
        },
        "identifierMapping": {
            "type": "select", // Show select list with default value
            "description": "Postgres identifier mapping",
            "scope": "connection",
            "values": [
                {
                    "name": "CONVERT_TO_UPPER",
                    "description": "Automatic identifier handling (do not use quoted identifiers!)",
                    "default": true
                },
                {
                    "name": "PRESERVE_ORIGINAL_CASE",
                    "description": "Don't change case"
                }
            ]
        },
        "ignoreErrors": {
            "type": "select",
            "description": "Ignore postgres errors",
            "scope": "connection",
            "values": [
                {
                    "name": "POSTGRESQL_UPPERCASE_TABLES",
                    "description": "Ignore upper case table names in Postgres",
                    "default": false
                },
                {
                    "name": "",
                    "description": "Don't ignore upper case table names in Postgres",
                    "default": true
                }
            ]
        }
    },
    "sqlScripts": {
        "create": {
            "configuration": [
                "CREATE IF NOT EXISTS SCHEMA \"${param.adapterSchema}\"",
                "CREATE OR REPLACE JAVA ADAPTER SCRIPT \"${param.adapterSchema}\".\"${param.adapterScriptName}\" AS %scriptclass com.exasol.adapter.RequestDispatcher; %jar ${bucketFsUpload.jdbcDriver.bucketFsPath}; %jar ${bucketFsUpload.virtualSchemaAdapter.bucketFsPath};"
            ],
            "connection": [
                "CREATE OR REPLACE CONNECTION \"${param.connectionName}\" TO '${param.jdbcUrl}' USER '${param.user}' IDENTIFIED BY '${param.password}'",
                "CREATE VIRTUAL SCHEMA \"${param.virtualSchemaName}\" USING \"${param.adapterSchema}\".\"$(param.adapterScriptName)\" WITH CATALOG_NAME = '${param.postgresCatalogName}' SCHEMA_NAME = '${param.postgresSchemaName}' CONNECTION_NAME = '${param.connectionName}' POSTGRESQL_IDENTIFIER_MAPPING = '${param.identifierMapping}', IGNORE_ERRORS = '${param.ignoreErrors'"
            ]
        },
        "update": {
            "configuration": [
                "CREATE OR REPLACE JAVA ADAPTER SCRIPT ..."
            ],
            "connection": [
                "CREATE OR REPLACE CONNECTION ...",
                "DROP VIRTUAL SCHEMA \"${param.virtualSchemaName}\"",
                "CREATE VIRTUAL SCHEMA \"${param.virtualSchemaName}\" ..."
            ]
        },
        "drop": {
            "configuration": [
                "DROP JAVA ADAPTER SCRIPT ..."
            ],
            "connection": [
                "DROP CONNECTION ...",
                "DROP VIRTUAL SCHEMA ...",
                "DROP SCHEMA \"${param.adapterSchema}\""
            ]
        }
    }
}